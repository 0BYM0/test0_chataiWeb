/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _asyncToGenerator = require('@babel/runtime/helpers/asyncToGenerator');
var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var _regeneratorRuntime = require('@babel/runtime/regenerator');
var _typeof = require('@babel/runtime/helpers/typeof');
var tree_index = require('../tree/index.js');
var selectInput_index = require('../select-input/index.js');
var commonComponents_fakeArrow = require('../common-components/fake-arrow.js');
var treeSelect_props = require('./props.js');
require('../_chunks/dep-8fba4765.js');
var index = require('../_chunks/dep-7ccc7687.js');
var index$1 = require('../_chunks/dep-8500f5b7.js');
var index$5 = require('../_chunks/dep-3c32ad9d.js');
var index$2 = require('../_chunks/dep-2b622501.js');
require('../_chunks/dep-8523711b.js');
var index$3 = require('../_chunks/dep-1da09c73.js');
var index$4 = require('../_chunks/dep-e3ed17b8.js');
var isFunction = require('../_chunks/dep-d7893d44.js');
var isBoolean = require('../_chunks/dep-86eb8dfc.js');
var isArray = require('../_chunks/dep-f906312d.js');
var isEmpty = require('../_chunks/dep-38567573.js');
var isNil = require('../_chunks/dep-a6d13633.js');
var configProvider_hooks_useConfig = require('../config-provider/hooks/useConfig.js');
require('../tree/tree.js');
require('../tree/utils/adapt.js');
require('../_chunks/dep-41ff0a93.js');
require('../_chunks/dep-df51b341.js');
require('../_chunks/dep-2e89db5d.js');
require('../_chunks/dep-5bdeff12.js');
require('../_chunks/dep-868e1f85.js');
require('../_chunks/dep-3509ae3d.js');
require('../_chunks/dep-359510f3.js');
require('../_chunks/dep-53e7d6ea.js');
require('../_chunks/dep-093a5113.js');
require('../_chunks/dep-2264eeac.js');
require('../_chunks/dep-533a0842.js');
require('../_chunks/dep-10f04a78.js');
require('../_chunks/dep-4708e1c0.js');
require('../_chunks/dep-7d88053e.js');
require('../_chunks/dep-2dec2180.js');
require('../_chunks/dep-d401bebf.js');
require('../_chunks/dep-ab1d761f.js');
require('../_chunks/dep-28d847a7.js');
require('../_chunks/dep-df147fc1.js');
require('../_chunks/dep-ccf6c349.js');
require('../_chunks/dep-39a47b2e.js');
require('tdesign-icons-vue-next');
require('../checkbox/index.js');
require('../checkbox/checkbox.js');
require('../checkbox/props.js');
require('../_chunks/dep-3ec672f9.js');
require('../_chunks/dep-2166f127.js');
require('../_chunks/dep-d7a24f22.js');
require('../checkbox/consts/index.js');
require('../checkbox/hooks/useCheckboxLazyLoad.js');
require('../checkbox/hooks/useKeyboardEvent.js');
require('../_chunks/dep-08fbc968.js');
require('../_chunks/dep-5b5ab11b.js');
require('../_chunks/dep-d6bf0a64.js');
require('../_chunks/dep-e9b94c97.js');
require('../_chunks/dep-0305ebce.js');
require('../_chunks/dep-727cd003.js');
require('../_chunks/dep-f504993c.js');
require('../_chunks/dep-2f93690b.js');
require('../_chunks/dep-8fef7bc0.js');
require('../_chunks/dep-0eaf28bf.js');
require('../_chunks/dep-eb1b4ee7.js');
require('dayjs');
require('../_chunks/dep-1fc38e0f.js');
require('../_chunks/dep-505a0867.js');
require('../_chunks/dep-1c58a5b0.js');
require('../_chunks/dep-6dcd468b.js');
require('../_chunks/dep-5f046b75.js');
require('../_chunks/dep-07964ae0.js');
require('../_chunks/dep-303fa046.js');
require('../_chunks/dep-e4d8e384.js');
require('../_chunks/dep-164c7de5.js');
require('../_chunks/dep-b7f2b504.js');
require('@babel/runtime/helpers/createClass');
require('@babel/runtime/helpers/classCallCheck');
require('../checkbox/group.js');
require('../checkbox/checkbox-group-props.js');
require('../_chunks/dep-98baf2b8.js');
require('../_chunks/dep-9aadaca3.js');
require('../_chunks/dep-13ae23f9.js');
require('../_chunks/dep-12e99cee.js');
require('../_chunks/dep-28faee79.js');
require('../loading/index.js');
require('../_chunks/dep-8400584d.js');
require('../loading/plugin.js');
require('../_chunks/dep-ee16025d.js');
require('../loading/icon/gradient.js');
require('../_chunks/dep-45fba3e8.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../_chunks/dep-76fcae27.js');
require('../_chunks/dep-9036997f.js');
require('../loading/props.js');
require('../_chunks/dep-c79defa2.js');
require('../_chunks/dep-823cb2f3.js');
require('../_chunks/dep-856c334c.js');
require('../_chunks/dep-6fc75111.js');
require('../_chunks/dep-c86d2c66.js');
require('../_chunks/dep-fb930305.js');
require('../_chunks/dep-32074184.js');
require('../_chunks/dep-be494b00.js');
require('../_chunks/dep-68fb67f5.js');
require('../_chunks/dep-41c21e8f.js');
require('../_chunks/dep-c467569f.js');
require('../_chunks/dep-fa954864.js');
require('../_chunks/dep-44c5a558.js');
require('../tree/hooks/useDragHandle.js');
require('../tree/hooks/useDraggable.js');
require('../tree/utils/index.js');
require('../tree/hooks/useTreeAction.js');
require('../tree/hooks/useTreeNodes.js');
require('../tree/tree-item.js');
require('../tree/hooks/useItemState.js');
require('../tree/hooks/useTreeItem.js');
require('../tree/hooks/useItemEvents.js');
require('../tree/hooks/useRenderIcon.js');
require('../tree/hooks/useRenderLabel.js');
require('../tree/hooks/useRenderLine.js');
require('../tree/hooks/useRenderOperations.js');
require('../tree/hooks/useTreeEvents.js');
require('../tree/hooks/useTreeScroll.js');
require('../tree/hooks/useTreeState.js');
require('../tree/hooks/useTreeStore.js');
require('../_chunks/dep-e895a51b.js');
require('mitt');
require('../_chunks/dep-073a95fa.js');
require('../_chunks/dep-de1e6937.js');
require('../_chunks/dep-b187d063.js');
require('../tree/hooks/useTreeStyles.js');
require('../tree/props.js');
require('../select-input/select-input.js');
require('../popup/index.js');
require('../popup/popup.js');
require('@popperjs/core');
require('../popup/container.js');
require('../popup/props.js');
require('../_chunks/dep-57de89e9.js');
require('../select-input/props.js');
require('../select-input/hooks/useMultiple.js');
require('../tag-input/index.js');
require('../tag-input/tag-input.js');
require('../input/index.js');
require('../input/input.js');
require('../input/props.js');
require('../input/hooks/useInput.js');
require('../form/consts/index.js');
require('../input/hooks/useLengthLimit.js');
require('../input/hooks/useInputEventHandler.js');
require('../input/hooks/useInputWidth.js');
require('../input/input-group.js');
require('../input/input-group-props.js');
require('../tag-input/props.js');
require('../tag-input/hooks/useDragSorter.js');
require('../tag-input/hooks/useHover.js');
require('../tag-input/hooks/useTagScroll.js');
require('../tag-input/hooks/useTagList.js');
require('../tag/index.js');
require('../tag/tag.js');
require('tinycolor2');
require('../tag/props.js');
require('../tag/check-tag.js');
require('../tag/check-tag-props.js');
require('../tag/check-tag-group.js');
require('../tag/check-tag-group-props.js');
require('../select-input/hooks/useOverlayInnerStyle.js');
require('../select-input/hooks/useSingle.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);
var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _regeneratorRuntime__default = /*#__PURE__*/_interopDefaultLegacy(_regeneratorRuntime);
var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);

function findParentValues(options, targetValue, realValue, realChildren) {
  var currentTargetValue = targetValue;
  if (currentTargetValue != null && _typeof__default["default"](currentTargetValue) === "object") {
    var _currentTargetValue;
    currentTargetValue = (_currentTargetValue = currentTargetValue) === null || _currentTargetValue === void 0 ? void 0 : _currentTargetValue[realValue];
  }
  if (currentTargetValue == null) return [];
  function findPath(nodes, parentPath) {
    var result = null;
    nodes.some(function (node) {
      var newPath = [].concat(_toConsumableArray__default["default"](parentPath), [node[realValue]]);
      if (node[realValue] === currentTargetValue) {
        result = parentPath;
        return true;
      }
      if (Array.isArray(node[realChildren]) && node[realChildren].length) {
        result = findPath(node[realChildren], newPath);
        if (result !== null) {
          return true;
        }
      }
      return false;
    });
    return result;
  }
  return findPath(options, []) || [];
}

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _TreeSelect = Vue.defineComponent({
  name: "TTreeSelect",
  props: treeSelect_props["default"],
  setup: function setup(props2, _ref) {
    var slots = _ref.slots,
      expose = _ref.expose;
    var renderTNodeJSX = index.useTNodeJSX();
    var renderDefaultTNode = index.useTNodeDefault();
    var classPrefix = index$1.usePrefixClass();
    var _useConfig = configProvider_hooks_useConfig.useConfig("treeSelect"),
      globalConfig = _useConfig.globalConfig;
    var formDisabled = index$2.useDisabled();
    var isReadonly = index$3.useReadonly();
    var treeRef = Vue.ref(null);
    var actived = Vue.ref([]);
    var expanded = Vue.ref([]);
    var nodeInfo = Vue.ref(null);
    var treeKey = Vue.ref(0);
    var _toRefs = Vue.toRefs(props2),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue,
      popupVisible = _toRefs.popupVisible,
      inputValue = _toRefs.inputValue;
    var _useVModel = index$4.useVModel(value, modelValue, props2.defaultValue, props2.onChange),
      _useVModel2 = _slicedToArray__default["default"](_useVModel, 2),
      treeSelectValue = _useVModel2[0],
      setTreeSelectValue = _useVModel2[1];
    var _useDefaultValue = index$5.useDefaultValue(popupVisible, false, props2.onPopupVisibleChange, "popupVisible"),
      _useDefaultValue2 = _slicedToArray__default["default"](_useDefaultValue, 2),
      innerVisible = _useDefaultValue2[0],
      setInnerVisible = _useDefaultValue2[1];
    var _useDefaultValue3 = index$5.useDefaultValue(inputValue, props2.defaultInputValue, props2.onInputChange, "inputValue"),
      _useDefaultValue4 = _slicedToArray__default["default"](_useDefaultValue3, 2),
      innerInputValue = _useDefaultValue4[0],
      setInnerInputValue = _useDefaultValue4[1];
    var setTreeParentsExpanded = function setTreeParentsExpanded() {
      var getParents = function getParents(value2) {
        return findParentValues(props2.data, value2, realValue.value, realChildren.value);
      };
      var treeParents = [];
      if (treeSelectValue.value) {
        if (Array.isArray(treeSelectValue.value) && props2.multiple) {
          treeParents = treeSelectValue.value.flatMap(getParents);
        } else if (!Array.isArray(treeSelectValue.value) && !props2.multiple) {
          treeParents = getParents(treeSelectValue.value);
        }
      }
      expanded.value = Array.from(/* @__PURE__ */new Set([].concat(_toConsumableArray__default["default"](expanded.value), _toConsumableArray__default["default"](treeParents))));
    };
    Vue.watch(treeSelectValue, /*#__PURE__*/_asyncToGenerator__default["default"](/*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee() {
      return _regeneratorRuntime__default["default"].wrap(function (_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.next = 1;
            return changeNodeInfo();
          case 1:
            if (!props2.multiple) {
              actived.value = nodeInfo.value ? [nodeInfo.value.value] : [];
            }
            setTreeParentsExpanded();
          case 2:
          case "end":
            return _context.stop();
        }
      }, _callee);
    })));
    Vue.watch(function () {
      return props2.data;
    }, /*#__PURE__*/_asyncToGenerator__default["default"](/*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee2() {
      return _regeneratorRuntime__default["default"].wrap(function (_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 1;
            return changeNodeInfo();
          case 1:
            treeRerender();
          case 2:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    })), {
      deep: true
    });
    var filterByText = Vue.computed(function () {
      var value2 = innerInputValue.value || "";
      if (value2 === "") {
        return null;
      }
      return function (node) {
        if (isFunction.isFunction(props2.filter)) {
          var filter = props2.filter(String(value2), node);
          if (isBoolean.isBoolean(filter)) {
            return filter;
          }
        }
        return node.data[realLabel.value].indexOf(value2) >= 0;
      };
    });
    var tDisabled = Vue.computed(function () {
      return formDisabled.value || props2.disabled;
    });
    var inputPlaceholder = Vue.computed(function () {
      var _nodeInfo$value;
      return innerVisible.value && ((_nodeInfo$value = nodeInfo.value) === null || _nodeInfo$value === void 0 ? void 0 : _nodeInfo$value.label) || props2.placeholder || globalConfig.value.placeholder;
    });
    var popupClass = Vue.computed(function () {
      return ["".concat(classPrefix.value, "-select__dropdown"), "narrow-scrollbar"];
    });
    var dropdownInnerSize = Vue.computed(function () {
      return {
        small: "s",
        medium: "m",
        large: "l"
      }[props2.size];
    });
    var isObjectValue = Vue.computed(function () {
      return props2.valueType === "object";
    });
    var checked = Vue.computed(function () {
      if (props2.multiple) {
        if (isObjectValue.value) {
          return isArray.isArray(treeSelectValue.value) ? treeSelectValue.value.map(function (item) {
            return item.value;
          }) : [];
        }
        return isArray.isArray(treeSelectValue.value) ? treeSelectValue.value.map(function (item) {
          return item;
        }) : [];
      }
      return [];
    });
    var multiLimitDisabled = Vue.computed(function () {
      return props2.multiple && !!props2.max && isArray.isArray(treeSelectValue.value) && props2.max <= treeSelectValue.value.length;
    });
    var realLabel = Vue.computed(function () {
      var _props2$keys;
      if (!isEmpty.isEmpty(props2.treeProps) && !isEmpty.isEmpty(props2.treeProps.keys)) {
        return props2.treeProps.keys.label || "label";
      }
      return ((_props2$keys = props2.keys) === null || _props2$keys === void 0 ? void 0 : _props2$keys.label) || "label";
    });
    var realValue = Vue.computed(function () {
      var _props2$keys2;
      if (!isEmpty.isEmpty(props2.treeProps) && !isEmpty.isEmpty(props2.treeProps.keys)) {
        return props2.treeProps.keys.value || "value";
      }
      return ((_props2$keys2 = props2.keys) === null || _props2$keys2 === void 0 ? void 0 : _props2$keys2.value) || "value";
    });
    var realChildren = Vue.computed(function () {
      var _props2$keys3;
      if (!isEmpty.isEmpty(props2.treeProps) && !isEmpty.isEmpty(props2.treeProps.keys)) {
        return props2.treeProps.keys.children || "children";
      }
      return ((_props2$keys3 = props2.keys) === null || _props2$keys3 === void 0 ? void 0 : _props2$keys3.children) || "children";
    });
    Vue.onMounted(/*#__PURE__*/_asyncToGenerator__default["default"](/*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee3() {
      var _treeSelectValue$valu;
      return _regeneratorRuntime__default["default"].wrap(function (_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            setTreeParentsExpanded();
            if (!treeSelectValue.value && props2.defaultValue) {
              change(props2.defaultValue, null, "uncheck");
            }
            if (isObjectValue.value) {
              actived.value = isArray.isArray(treeSelectValue.value) ? treeSelectValue.value.map(function (item) {
                return item === null || item === void 0 ? void 0 : item.value;
              }) : [(_treeSelectValue$valu = treeSelectValue.value) === null || _treeSelectValue$valu === void 0 ? void 0 : _treeSelectValue$valu.value];
            } else {
              actived.value = isArray.isArray(treeSelectValue.value) ? treeSelectValue.value : [treeSelectValue.value];
            }
            changeNodeInfo();
          case 1:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    })));
    var change = function change(valueParam, node, trigger) {
      setTreeSelectValue(valueParam, {
        node: node,
        trigger: trigger
      });
      changeNodeInfo();
    };
    var clear = function clear(content) {
      var _props2$onClear;
      var defaultValue = props2.multiple ? [] : "";
      actived.value = [];
      change(defaultValue, null, "clear");
      (_props2$onClear = props2.onClear) === null || _props2$onClear === void 0 || _props2$onClear.call(props2, {
        e: content.e
      });
    };
    var treeNodeChange = function treeNodeChange(valueParam, context) {
      var current = valueParam;
      if (isObjectValue.value) {
        current = valueParam.map(getNodeItem);
      }
      change(current, context.node, "check");
    };
    var treeNodeActive = function treeNodeActive(valueParam, context) {
      if (!props2.multiple) {
        setInnerVisible(false, context);
      }
      if (props2.multiple || !context.node.actived) {
        return;
      }
      if (treeSelectValue.value === context.node.data[realValue.value]) {
        return;
      }
      var current = valueParam;
      if (isObjectValue.value) {
        var nodeValue = isEmpty.isEmpty(valueParam) ? "" : valueParam[0];
        current = getNodeItem(nodeValue);
      } else {
        current = isEmpty.isEmpty(valueParam) ? "" : valueParam[0];
      }
      change(current, context.node, "check");
      actived.value = valueParam;
    };
    var treeNodeExpand = function treeNodeExpand(valueParam) {
      expanded.value = valueParam;
    };
    var treeNodeLoad = function treeNodeLoad() {
      changeNodeInfo();
    };
    var inputChange = function inputChange(value2) {
      var _props2$onSearch2;
      if (!innerVisible.value) {
        var _props2$onSearch;
        (_props2$onSearch = props2.onSearch) === null || _props2$onSearch === void 0 || _props2$onSearch.call(props2, String(value2));
        return;
      }
      setInnerInputValue(value2);
      (_props2$onSearch2 = props2.onSearch) === null || _props2$onSearch2 === void 0 || _props2$onSearch2.call(props2, String(value2));
    };
    var tagChange = function tagChange(value2, context) {
      var _props2$onRemove;
      var trigger = context.trigger,
        index = context.index;
      if (["tag-remove", "backspace"].includes(trigger)) {
        isArray.isArray(treeSelectValue.value) && treeSelectValue.value.splice(index, 1);
      }
      (_props2$onRemove = props2.onRemove) === null || _props2$onRemove === void 0 || _props2$onRemove.call(props2, {
        value: value2,
        data: null,
        e: context && context.e
      });
      change(treeSelectValue.value, null, trigger);
    };
    var handlePopupVisibleChange = function handlePopupVisibleChange(visible, context) {
      setInnerVisible(visible, context);
      if (visible && context.trigger === "trigger-element-click") setInnerInputValue("");
    };
    var changeNodeInfo = /*#__PURE__*/function () {
      var _ref5 = _asyncToGenerator__default["default"](/*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee4() {
        return _regeneratorRuntime__default["default"].wrap(function (_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!props2.multiple) {
                if (treeSelectValue.value || treeSelectValue.value === 0) {
                  nodeInfo.value = getSingleNodeInfo();
                } else {
                  nodeInfo.value = "";
                }
              } else if (props2.multiple) {
                if (isArray.isArray(treeSelectValue.value)) {
                  nodeInfo.value = getMultipleNodeInfo();
                } else {
                  nodeInfo.value = [];
                }
              } else {
                nodeInfo.value = null;
              }
            case 1:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      return function changeNodeInfo() {
        return _ref5.apply(this, arguments);
      };
    }();
    var getSingleNodeInfo = function getSingleNodeInfo() {
      var nodeValue = isObjectValue.value ? treeSelectValue.value.value : treeSelectValue.value;
      return getNodeItem(nodeValue);
    };
    var getMultipleNodeInfo = function getMultipleNodeInfo() {
      return treeSelectValue.value.map(function (value2) {
        var nodeValue = isObjectValue.value ? value2.value : value2;
        return getNodeItem(nodeValue);
      });
    };
    var getNodeItem = function getNodeItem(targetValue) {
      if (treeRef.value) {
        var node2 = treeRef.value.getItem(targetValue);
        if (node2) {
          return _objectSpread(_objectSpread({}, node2.data), {}, {
            label: node2.data[realLabel.value],
            value: node2.data[realValue.value]
          });
        }
      }
      var node = _getTreeNode(props2.data, targetValue);
      if (node) {
        return node;
      }
      return {
        label: targetValue,
        value: targetValue
      };
    };
    var _getTreeNode = function getTreeNode(data, targetValue) {
      for (var i = 0, len = data.length; i < len; i++) {
        var item = data[i];
        if (item[realValue.value] === targetValue) {
          return _objectSpread(_objectSpread({}, item), {}, {
            label: item[realLabel.value],
            value: item[realValue.value]
          });
        }
        if (item !== null && item !== void 0 && item[realChildren.value]) {
          var result = _getTreeNode(item === null || item === void 0 ? void 0 : item[realChildren.value], targetValue);
          if (!isNil.isNil(result)) {
            return result;
          }
        }
      }
      return null;
    };
    var treeRerender = function treeRerender() {
      treeKey.value += 1;
    };
    var renderTree = function renderTree() {
      return Vue.withDirectives(Vue.createVNode(tree_index.Tree, Vue.mergeProps({
        "ref": treeRef,
        "key": treeKey.value,
        "value": _toConsumableArray__default["default"](checked.value),
        "hover": true,
        "keys": props2.keys,
        "data": props2.data,
        "activable": !props2.multiple,
        "checkable": props2.multiple,
        "disabled": tDisabled.value || multiLimitDisabled.value,
        "size": props2.size,
        "filter": filterByText.value,
        "icon": !filterByText.value,
        "actived": actived.value,
        "expanded": expanded.value,
        "activeMultiple": props2.multiple,
        "onChange": treeNodeChange,
        "onActive": treeNodeActive,
        "onExpand": treeNodeExpand,
        "onLoad": treeNodeLoad,
        "expandOnClickNode": false
      }, props2.treeProps), {
        empty: function empty() {
          return renderDefaultTNode("empty", {
            defaultNode: Vue.createVNode("div", {
              "class": "".concat(classPrefix.value, "-select__empty")
            }, [globalConfig.value.empty])
          });
        }
      }), [[Vue.vShow, !props2.loading]]);
    };
    var renderSuffixIcon = function renderSuffixIcon() {
      return Vue.createVNode(commonComponents_fakeArrow["default"], {
        "isActive": innerVisible.value,
        "disabled": props2.disabled,
        "overlayClassName": _defineProperty__default["default"](_defineProperty__default["default"]({}, "".concat(classPrefix.value, "-fake-arrow--highlight"), innerVisible.value), "".concat(classPrefix.value, "-fake-arrow--disable"), props2.disabled)
      }, null);
    };
    expose({
      treeRef: treeRef
    });
    return function () {
      return Vue.createVNode(selectInput_index.SelectInput, Vue.mergeProps({
        "class": "".concat(classPrefix.value, "-tree-select"),
        "value": nodeInfo.value,
        "inputValue": innerVisible.value ? innerInputValue.value : "",
        "popupVisible": innerVisible.value,
        "disabled": tDisabled.value,
        "multiple": props2.multiple,
        "loading": props2.loading,
        "clearable": props2.clearable,
        "autoWidth": props2.autoWidth,
        "borderless": props2.borderless,
        "readonly": isReadonly.value,
        "placeholder": inputPlaceholder.value,
        "allowInput": props2.filterable || isFunction.isFunction(props2.filter),
        "minCollapsedNum": props2.minCollapsedNum,
        "collapsed-items": props2.collapsedItems,
        "popupProps": _objectSpread({
          overlayClassName: popupClass.value
        }, props2.popupProps),
        "inputProps": _objectSpread({
          size: props2.size
        }, props2.inputProps),
        "tagInputProps": {
          size: props2.size
        },
        "tagProps": _objectSpread({
          maxWidth: 300
        }, props2.tagProps),
        "label": function label() {
          return renderTNodeJSX("prefixIcon");
        },
        "suffix": props2.suffix,
        "suffixIcon": function suffixIcon() {
          if (props2.suffixIcon || slots.suffixIcon) {
            return renderTNodeJSX("suffixIcon");
          }
          return renderSuffixIcon();
        },
        "onClear": clear,
        "onBlur": function onBlur(_, context) {
          var _props2$onBlur;
          (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 || _props2$onBlur.call(props2, {
            value: treeSelectValue.value,
            e: context.e
          });
        },
        "onFocus": function onFocus(_, context) {
          var _props2$onFocus;
          (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 || _props2$onFocus.call(props2, {
            value: treeSelectValue.value,
            e: context.e
          });
        },
        "valueDisplay": function valueDisplay() {
          return renderTNodeJSX("valueDisplay", {
            params: props2.multiple ? {
              value: nodeInfo.value,
              onClose: function onClose(index) {
                var value2 = nodeInfo.value.map(function (node) {
                  return node.value;
                });
                tagChange(value2, {
                  trigger: "tag-remove",
                  index: index,
                  item: value2[index]
                });
              }
            } : {
              value: nodeInfo.value || _defineProperty__default["default"](_defineProperty__default["default"]({}, realLabel.value, ""), realValue.value, void 0)
            }
          });
        },
        "onInputChange": inputChange,
        "onTagChange": tagChange,
        "onPopupVisibleChange": handlePopupVisibleChange
      }, props2.selectInputProps), {
        suffix: slots.suffix,
        panel: function panel() {
          return Vue.createVNode("div", {
            "class": ["".concat(classPrefix.value, "-select__dropdown-inner"), "".concat(classPrefix.value, "-select__dropdown-inner--size-").concat(dropdownInnerSize.value)]
          }, [renderTNodeJSX("panelTopContent"), Vue.withDirectives(Vue.createVNode("p", {
            "class": ["".concat(classPrefix.value, "-select-loading-tips"), "".concat(classPrefix.value, "-select__right-icon-polyfill")]
          }, [renderDefaultTNode("loadingText", {
            defaultNode: Vue.createVNode("div", {
              "class": "".concat(classPrefix.value, "-select__empty")
            }, [globalConfig.value.loadingText])
          })]), [[Vue.vShow, props2.loading && !tDisabled.value]]), renderTree(), renderTNodeJSX("panelBottomContent")]);
        },
        collapsedItems: slots.collapsedItems
      });
    };
  }
});

exports["default"] = _TreeSelect;
//# sourceMappingURL=tree-select.js.map
