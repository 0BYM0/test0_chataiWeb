/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var table_components_tr = require('./tr.js');
require('@babel/runtime/helpers/typeof');
require('../../_chunks/dep-8fba4765.js');
var index = require('../../_chunks/dep-7ccc7687.js');
var configProvider_hooks_useConfig = require('../../config-provider/hooks/useConfig.js');
require('@babel/runtime/helpers/slicedToArray');
require('../../_chunks/dep-8523711b.js');
var table_hooks_useClassName = require('../hooks/useClassName.js');
var table_baseTableProps = require('../base-table-props.js');
var table_hooks_useRowspanAndColspan = require('../hooks/useRowspanAndColspan.js');
var pick = require('../../_chunks/dep-de1e6937.js');
var get = require('../../_chunks/dep-c86d2c66.js');
var camelCase = require('../../_chunks/dep-e9b94c97.js');
require('../utils/index.js');
require('../../_chunks/dep-d7893d44.js');
require('../../_chunks/dep-359510f3.js');
require('../../_chunks/dep-4708e1c0.js');
require('../hooks/useFixed.js');
require('../../_chunks/dep-41c21e8f.js');
require('../../_chunks/dep-a373a5c4.js');
require('../../_chunks/dep-45fba3e8.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../../_chunks/dep-28faee79.js');
require('../../_chunks/dep-76fcae27.js');
require('../../_chunks/dep-3509ae3d.js');
require('../../_chunks/dep-f906312d.js');
require('../../_chunks/dep-53e7d6ea.js');
require('../../_chunks/dep-9036997f.js');
require('../../_chunks/dep-868e1f85.js');
require('../../_chunks/dep-b7f2b504.js');
require('../../_chunks/dep-d401bebf.js');
require('../../_chunks/dep-ab1d761f.js');
require('../../_chunks/dep-28d847a7.js');
require('../../_chunks/dep-df147fc1.js');
require('../../_chunks/dep-ccf6c349.js');
require('../../_chunks/dep-073a95fa.js');
require('../../_chunks/dep-13ae23f9.js');
require('../../_chunks/dep-5f046b75.js');
require('../../_chunks/dep-12e99cee.js');
require('../../_chunks/dep-0305ebce.js');
require('../../_chunks/dep-2dec2180.js');
require('../../_chunks/dep-505a0867.js');
require('../../_chunks/dep-44c5a558.js');
require('../../_chunks/dep-1f4ac005.js');
require('../../_chunks/dep-164c7de5.js');
require('../../_chunks/dep-856c334c.js');
require('../../_chunks/dep-fa954864.js');
require('../../_chunks/dep-10f04a78.js');
require('../../_chunks/dep-7d88053e.js');
require('../../_chunks/dep-5b5ab11b.js');
require('../../_chunks/dep-fb930305.js');
require('../../_chunks/dep-b187d063.js');
require('../../_chunks/dep-6dcd468b.js');
require('../../_chunks/dep-32074184.js');
require('./ellipsis.js');
require('../../tooltip/index.js');
require('../../tooltip/tooltip.js');
require('../../tooltip/props.js');
require('../../popup/props.js');
require('../../popup/index.js');
require('../../popup/popup.js');
require('@popperjs/core');
require('../../_chunks/dep-3ec672f9.js');
require('../../_chunks/dep-8500f5b7.js');
require('../../_chunks/dep-d7a24f22.js');
require('../../_chunks/dep-e3ed17b8.js');
require('../../_chunks/dep-8fef7bc0.js');
require('../../_chunks/dep-2f93690b.js');
require('../../popup/container.js');
require('../../_chunks/dep-2264eeac.js');
require('../../_chunks/dep-57de89e9.js');
require('../../_chunks/dep-39a47b2e.js');
require('../../_chunks/dep-d6bf0a64.js');
require('../../_chunks/dep-727cd003.js');
require('../../_chunks/dep-f504993c.js');
require('../../_chunks/dep-0eaf28bf.js');
require('../../_chunks/dep-eb1b4ee7.js');
require('dayjs');
require('../../_chunks/dep-1fc38e0f.js');
require('../../_chunks/dep-1c58a5b0.js');
require('../../_chunks/dep-07964ae0.js');
require('../../_chunks/dep-303fa046.js');
require('../../_chunks/dep-e4d8e384.js');
require('@babel/runtime/helpers/createClass');
require('@babel/runtime/helpers/classCallCheck');
require('../../_chunks/dep-41ff0a93.js');
require('../../tooltip/utils/index.js');
require('../../_chunks/dep-c467569f.js');
require('../hooks/useLazyLoad.js');
require('../../_chunks/dep-5bdeff12.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var ROW_AND_TD_LISTENERS = [].concat(_toConsumableArray__default["default"](table_components_tr.ROW_LISTENERS), ["cell-click"]);
var extendTableProps = ["bordered", "rowKey", "rowClassName", "rowAttributes", "loading", "empty", "fixedRows", "firstFullRow", "lastFullRow", "rowspanAndColspan", "scroll", "cellEmptyContent", "pagination", "attach", "onCellClick", "onPageChange", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup", "onScroll", "onScrollX", "onScrollY"];
var TBody = Vue.defineComponent({
  name: "TBody",
  props: _objectSpread({
    classPrefix: String,
    data: Array,
    columns: Array,
    ellipsisOverlayClassName: String,
    rowAndColFixedPosition: Map,
    showColumnShadow: Object,
    tableElm: {},
    tableWidth: Number,
    isWidthOverflow: Boolean,
    virtualConfig: Object,
    tableContentElm: {},
    handleRowMounted: Function,
    renderExpandedRow: Function,
    firstFullRow: [String, Function],
    lastFullRow: [String, Function],
    activeRow: [Array],
    hoverRow: [String, Number]
  }, pick.pick(table_baseTableProps["default"], extendTableProps)),
  setup: function setup(props, _ref) {
    var slots = _ref.slots;
    var renderTNode = index.useTNodeJSX();
    var _toRefs = Vue.toRefs(props),
      data = _toRefs.data,
      columns = _toRefs.columns,
      rowKey = _toRefs.rowKey,
      rowspanAndColspan = _toRefs.rowspanAndColspan;
    var _useConfig = configProvider_hooks_useConfig.useConfig("table", props.locale),
      t = _useConfig.t,
      globalConfig = _useConfig.globalConfig;
    var _useClassName = table_hooks_useClassName["default"](),
      tableFullRowClasses = _useClassName.tableFullRowClasses,
      tableBaseClass = _useClassName.tableBaseClass;
    var _useRowspanAndColspan = table_hooks_useRowspanAndColspan["default"](data, columns, rowKey, rowspanAndColspan),
      skipSpansMap = _useRowspanAndColspan.skipSpansMap;
    var tbodyClasses = Vue.computed(function () {
      return [tableBaseClass.body];
    });
    return function () {
      var _data$value, _data$value2, _props$virtualConfig, _props$virtualConfig2;
      var renderEmpty = function renderEmpty(columns2) {
        var tableWidth = props.bordered ? props.tableWidth - 2 : props.tableWidth;
        return Vue.createVNode("tr", {
          "class": [tableBaseClass.emptyRow, _defineProperty__default["default"]({}, tableFullRowClasses.base, props.isWidthOverflow)]
        }, [Vue.createVNode("td", {
          "colspan": columns2.length
        }, [Vue.createVNode("div", {
          "class": [tableBaseClass.empty, _defineProperty__default["default"]({}, tableFullRowClasses.innerFullRow, props.isWidthOverflow)],
          "style": props.isWidthOverflow ? {
            width: "".concat(tableWidth, "px")
          } : {}
        }, [renderTNode("empty") || t(globalConfig.value.empty)])])]);
      };
      var getFullRow = function getFullRow(columnLength2, type) {
        var tType = camelCase.camelCase(type);
        var fullRowNode = renderTNode(tType);
        if (["", null, void 0, false].includes(fullRowNode)) return null;
        var isFixedToLeft = props.isWidthOverflow && columns.value.find(function (col) {
          return col.fixed === "left";
        });
        var classes = [tableFullRowClasses.base, tableFullRowClasses[tType]];
        var tableWidth = props.bordered ? props.tableWidth - 2 : props.tableWidth;
        return Vue.createVNode("tr", {
          "class": classes,
          "key": "key-full-row-".concat(type)
        }, [Vue.createVNode("td", {
          "colspan": columnLength2
        }, [Vue.createVNode("div", {
          "class": _defineProperty__default["default"]({}, tableFullRowClasses.innerFullRow, isFixedToLeft),
          "style": isFixedToLeft ? {
            width: "".concat(tableWidth, "px")
          } : {}
        }, [Vue.createVNode("div", {
          "class": tableFullRowClasses.innerFullElement
        }, [fullRowNode])])])]);
      };
      var columnLength = columns.value.length;
      var dataLength = (_data$value = data.value) === null || _data$value === void 0 ? void 0 : _data$value.length;
      var trNodeList = [];
      var properties = ["classPrefix", "ellipsisOverlayClassName", "rowAndColFixedPosition", "scroll", "tableElm", "tableContentElm", "pagination", "attach"];
      var renderData = props.virtualConfig.isVirtualScroll.value ? props.virtualConfig.visibleData.value : data.value;
      renderData === null || renderData === void 0 || renderData.forEach(function (row, rowIndex) {
        var _props$activeRow;
        var rowKey2 = props.rowKey || "id";
        var rowValue = get.get(row, rowKey2);
        var trProps = _objectSpread(_objectSpread({}, pick.pick(props, table_components_tr.TABLE_PROPS)), {}, {
          rowKey: rowKey2,
          row: row,
          columns: columns.value,
          rowIndex: row.VIRTUAL_SCROLL_INDEX || rowIndex,
          dataLength: dataLength,
          skipSpansMap: skipSpansMap.value,
          virtualConfig: props.virtualConfig,
          active: (_props$activeRow = props.activeRow) === null || _props$activeRow === void 0 ? void 0 : _props$activeRow.includes(rowValue),
          isHover: props.hoverRow === rowValue
        }, pick.pick(props, properties));
        if (props.onCellClick) {
          trProps.onCellClick = props.onCellClick;
        }
        var trNode = Vue.createVNode(table_components_tr["default"], Vue.mergeProps({
          "key": get.get(row, rowKey2 || "id") || rowIndex
        }, trProps, {
          "onRowMounted": props.handleRowMounted
        }), slots);
        trNodeList.push(trNode);
        if (props.renderExpandedRow) {
          var p = {
            row: row,
            index: rowIndex,
            columns: columns.value,
            tableWidth: props.tableWidth,
            isWidthOverflow: props.isWidthOverflow
          };
          var expandedContent = props.renderExpandedRow(p);
          expandedContent && trNodeList.push(expandedContent);
        }
      });
      var list = [getFullRow(columnLength, "first-full-row")].concat(trNodeList, [getFullRow(columnLength, "last-full-row")]);
      var isEmpty = !((_data$value2 = data.value) !== null && _data$value2 !== void 0 && _data$value2.length) && !props.loading && !props.firstFullRow && !props.lastFullRow;
      var translate = "translateY(".concat((_props$virtualConfig = props.virtualConfig) === null || _props$virtualConfig === void 0 ? void 0 : _props$virtualConfig.translateY.value, "px)");
      var posStyle = (_props$virtualConfig2 = props.virtualConfig) !== null && _props$virtualConfig2 !== void 0 && _props$virtualConfig2.isVirtualScroll.value ? {
        transform: translate,
        "-ms-transform": translate,
        "-moz-transform": translate,
        "-webkit-transform": translate
      } : void 0;
      return Vue.createVNode("tbody", {
        "class": tbodyClasses.value,
        "style": _objectSpread({}, posStyle)
      }, [isEmpty ? renderEmpty(columns.value) : list]);
    };
  }
});

exports.ROW_AND_TD_LISTENERS = ROW_AND_TD_LISTENERS;
exports["default"] = TBody;
exports.extendTableProps = extendTableProps;
//# sourceMappingURL=tbody.js.map
