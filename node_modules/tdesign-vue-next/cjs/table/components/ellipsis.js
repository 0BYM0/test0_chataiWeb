/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
require('@babel/runtime/helpers/toConsumableArray');
require('@babel/runtime/helpers/typeof');
var dom = require('../../_chunks/dep-868e1f85.js');
var index = require('../../_chunks/dep-7ccc7687.js');
require('../../config-provider/hooks/useConfig.js');
require('@babel/runtime/helpers/slicedToArray');
require('../../_chunks/dep-8523711b.js');
var tooltip_index = require('../../tooltip/index.js');
var debounce = require('../../_chunks/dep-10f04a78.js');
require('../../_chunks/dep-8fba4765.js');
require('../../_chunks/dep-5b5ab11b.js');
require('../../_chunks/dep-d7893d44.js');
require('../../_chunks/dep-359510f3.js');
require('../../_chunks/dep-4708e1c0.js');
require('../../_chunks/dep-3509ae3d.js');
require('../../_chunks/dep-f906312d.js');
require('../../_chunks/dep-53e7d6ea.js');
require('../../_chunks/dep-d6bf0a64.js');
require('../../_chunks/dep-e9b94c97.js');
require('../../_chunks/dep-0305ebce.js');
require('../../_chunks/dep-2dec2180.js');
require('../../_chunks/dep-727cd003.js');
require('../../_chunks/dep-f504993c.js');
require('../../_chunks/dep-2f93690b.js');
require('../../_chunks/dep-8fef7bc0.js');
require('../../_chunks/dep-0eaf28bf.js');
require('../../_chunks/dep-eb1b4ee7.js');
require('dayjs');
require('../../_chunks/dep-1fc38e0f.js');
require('../../_chunks/dep-ab1d761f.js');
require('../../_chunks/dep-28d847a7.js');
require('../../_chunks/dep-df147fc1.js');
require('../../_chunks/dep-505a0867.js');
require('../../_chunks/dep-1c58a5b0.js');
require('../../_chunks/dep-ccf6c349.js');
require('../../_chunks/dep-6dcd468b.js');
require('../../_chunks/dep-5f046b75.js');
require('../../_chunks/dep-d401bebf.js');
require('../../_chunks/dep-07964ae0.js');
require('../../_chunks/dep-303fa046.js');
require('../../_chunks/dep-e4d8e384.js');
require('../../_chunks/dep-164c7de5.js');
require('../../_chunks/dep-b7f2b504.js');
require('@babel/runtime/helpers/createClass');
require('@babel/runtime/helpers/classCallCheck');
require('../../tooltip/tooltip.js');
require('../../tooltip/props.js');
require('../../popup/props.js');
require('../../popup/index.js');
require('../../popup/popup.js');
require('@popperjs/core');
require('../../_chunks/dep-3ec672f9.js');
require('../../_chunks/dep-8500f5b7.js');
require('../../_chunks/dep-d7a24f22.js');
require('../../_chunks/dep-e3ed17b8.js');
require('../../popup/container.js');
require('../../_chunks/dep-2264eeac.js');
require('../../_chunks/dep-57de89e9.js');
require('../../_chunks/dep-7d88053e.js');
require('../../_chunks/dep-39a47b2e.js');
require('../../_chunks/dep-41ff0a93.js');
require('../../tooltip/utils/index.js');
require('../../_chunks/dep-c467569f.js');
require('../../_chunks/dep-fb930305.js');
require('../../_chunks/dep-fa954864.js');
require('../../_chunks/dep-44c5a558.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
}
var TEllipsis = Vue.defineComponent({
  name: "TEllipsis",
  props: {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    tooltipContent: {
      type: [String, Number, Function]
    },
    placement: String,
    attach: [String, Function],
    tooltipProps: Object,
    zIndex: Number,
    overlayClassName: String,
    classPrefix: {
      type: String,
      "default": "t"
    }
  },
  setup: function setup(props) {
    var root = Vue.ref();
    var flag = Vue.ref(false);
    var isOverflow = Vue.ref(false);
    var renderContent = index.useContent();
    var ellipsisClasses = Vue.computed(function () {
      return ["".concat(props.classPrefix, "-table__ellipsis"), "".concat(props.classPrefix, "-text-ellipsis")];
    });
    var innerEllipsisClassName = Vue.computed(function () {
      return ["".concat(props.classPrefix, "-table__ellipsis-content"), props.overlayClassName];
    });
    Vue.onMounted(function () {
      isOverflow.value = dom.isTextEllipsis(root.value);
    });
    Vue.onUpdated(function () {
      isOverflow.value = dom.isTextEllipsis(root.value);
    });
    var onTriggerMouseenter = function onTriggerMouseenter() {
      if (!root.value) return;
      flag.value = true;
    };
    var onTriggerMouseleave = function onTriggerMouseleave() {
      if (!root.value) return;
    };
    var handleVisibleChange = function handleVisibleChange(v) {
      if (!v) flag.value = false;
    };
    var onMouseAround = debounce.debounce(function (e) {
      e.type === "mouseleave" ? onTriggerMouseleave() : onTriggerMouseenter();
    }, 80);
    return function () {
      var cellNode = renderContent("default", "content");
      var ellipsisContent = Vue.createVNode("div", {
        "ref": root,
        "class": ellipsisClasses.value,
        "onMouseenter": onMouseAround,
        "onMouseleave": onMouseAround,
        "style": {
          textOverflow: isOverflow.value ? "ellipsis" : "clip"
        }
      }, [cellNode]);
      var content = null;
      var tooltipProps = props.tooltipProps;
      if (isOverflow.value && flag.value) {
        var rProps = _objectSpread({
          content: props.tooltipContent || function () {
            return cellNode;
          },
          destroyOnClose: true,
          zIndex: props.zIndex,
          attach: props.attach,
          placement: props.placement,
          overlayClassName: tooltipProps !== null && tooltipProps !== void 0 && tooltipProps.overlayClassName ? innerEllipsisClassName.value.concat(tooltipProps.overlayClassName) : innerEllipsisClassName.value,
          onVisibleChange: handleVisibleChange
        }, tooltipProps);
        content = Vue.createVNode(tooltip_index.Tooltip, rProps, _isSlot(ellipsisContent) ? ellipsisContent : {
          "default": function _default() {
            return [ellipsisContent];
          }
        });
      } else {
        content = ellipsisContent;
      }
      return content;
    };
  }
});

exports["default"] = TEllipsis;
//# sourceMappingURL=ellipsis.js.map
