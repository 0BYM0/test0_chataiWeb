/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
require('@babel/runtime/helpers/typeof');
require('../../_chunks/dep-8fba4765.js');
var index = require('../../_chunks/dep-7ccc7687.js');
require('../../config-provider/hooks/useConfig.js');
var index$1 = require('../../_chunks/dep-df51b341.js');
require('@babel/runtime/helpers/slicedToArray');
var utils = require('../../_chunks/dep-01eb56da.js');
require('../../_chunks/dep-8523711b.js');
var imageViewer_index = require('../../image-viewer/index.js');
var upload_consts_index = require('../consts/index.js');
var button_index = require('../../button/index.js');
var upload_hooks_useDrag = require('../hooks/useDrag.js');
var loading_index = require('../../loading/index.js');
var link_index = require('../../link/index.js');
var image_index = require('../../image/index.js');
var isFunction = require('../../_chunks/dep-d7893d44.js');
var isObject = require('../../_chunks/dep-4708e1c0.js');
require('../../_chunks/dep-5b5ab11b.js');
require('../../_chunks/dep-868e1f85.js');
require('../../_chunks/dep-3509ae3d.js');
require('../../_chunks/dep-359510f3.js');
require('../../_chunks/dep-f906312d.js');
require('../../_chunks/dep-53e7d6ea.js');
require('../../_chunks/dep-d6bf0a64.js');
require('../../_chunks/dep-e9b94c97.js');
require('../../_chunks/dep-0305ebce.js');
require('../../_chunks/dep-2dec2180.js');
require('../../_chunks/dep-727cd003.js');
require('../../_chunks/dep-f504993c.js');
require('../../_chunks/dep-2f93690b.js');
require('../../_chunks/dep-8fef7bc0.js');
require('../../_chunks/dep-0eaf28bf.js');
require('../../_chunks/dep-eb1b4ee7.js');
require('dayjs');
require('../../_chunks/dep-1fc38e0f.js');
require('../../_chunks/dep-ab1d761f.js');
require('../../_chunks/dep-28d847a7.js');
require('../../_chunks/dep-df147fc1.js');
require('../../_chunks/dep-505a0867.js');
require('../../_chunks/dep-1c58a5b0.js');
require('../../_chunks/dep-ccf6c349.js');
require('../../_chunks/dep-6dcd468b.js');
require('../../_chunks/dep-5f046b75.js');
require('../../_chunks/dep-d401bebf.js');
require('../../_chunks/dep-07964ae0.js');
require('../../_chunks/dep-303fa046.js');
require('../../_chunks/dep-e4d8e384.js');
require('../../_chunks/dep-164c7de5.js');
require('../../_chunks/dep-b7f2b504.js');
require('../../_chunks/dep-41c21e8f.js');
require('@babel/runtime/helpers/createClass');
require('@babel/runtime/helpers/classCallCheck');
require('../../image-viewer/image-viewer.js');
require('../../_chunks/dep-8500f5b7.js');
require('../../_chunks/dep-3c32ad9d.js');
require('../../_chunks/dep-ee16025d.js');
require('../../loading/icon/gradient.js');
require('../../_chunks/dep-d7a24f22.js');
require('../../_chunks/dep-45fba3e8.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../../_chunks/dep-28faee79.js');
require('../../_chunks/dep-76fcae27.js');
require('../../_chunks/dep-9036997f.js');
require('../../_chunks/dep-3ec672f9.js');
require('../../loading/props.js');
require('../../_chunks/dep-e3ed17b8.js');
require('../../image-viewer/base/ImageItem.js');
require('@babel/runtime/helpers/asyncToGenerator');
require('@babel/runtime/regenerator');
require('../../_chunks/dep-ad69c403.js');
require('../../image-viewer/hooks/index.js');
require('../../_chunks/dep-b2920211.js');
require('../../_chunks/dep-cca649a1.js');
require('../../_chunks/dep-533a0842.js');
require('../../_chunks/dep-10f04a78.js');
require('../../_chunks/dep-7d88053e.js');
require('../../image-viewer/base/ImageModalIcon.js');
require('../../image-viewer/base/ImageViewerModal.js');
require('../../dialog/index.js');
require('../../dialog/dialog.js');
require('../../dialog/props.js');
require('../../_chunks/dep-0892f5ca.js');
require('../../dialog/hooks/useSameTarget.js');
require('../../_chunks/dep-a373a5c4.js');
require('../../dialog/utils/index.js');
require('../../dialog/dialog-card.js');
require('../../dialog/dialog-card-props.js');
require('../../dialog/hooks/useAction.js');
require('../../_chunks/dep-c467569f.js');
require('../../_chunks/dep-fb930305.js');
require('../../_chunks/dep-fa954864.js');
require('../../_chunks/dep-44c5a558.js');
require('../../button/button.js');
require('../../button/props.js');
require('../../_chunks/dep-2b622501.js');
require('../../_chunks/dep-86eb8dfc.js');
require('../../_chunks/dep-2166f127.js');
require('../../_chunks/dep-8400584d.js');
require('../../loading/plugin.js');
require('../../_chunks/dep-c79defa2.js');
require('../../_chunks/dep-823cb2f3.js');
require('../../_chunks/dep-13ae23f9.js');
require('../../_chunks/dep-856c334c.js');
require('../../_chunks/dep-6fc75111.js');
require('../../_chunks/dep-c86d2c66.js');
require('../../_chunks/dep-32074184.js');
require('../../_chunks/dep-be494b00.js');
require('../../_chunks/dep-41ff0a93.js');
require('../../dialog/plugin.js');
require('../../image-viewer/props.js');
require('../../image-viewer/base/ImageViewerUtils.js');
require('../../tooltip/index.js');
require('../../tooltip/tooltip.js');
require('../../tooltip/props.js');
require('../../popup/props.js');
require('../../popup/index.js');
require('../../popup/popup.js');
require('@popperjs/core');
require('../../popup/container.js');
require('../../_chunks/dep-2264eeac.js');
require('../../_chunks/dep-57de89e9.js');
require('../../_chunks/dep-39a47b2e.js');
require('../../tooltip/utils/index.js');
require('../../image-viewer/consts/index.js');
require('../../image-viewer/utils/index.js');
require('../../image/image.js');
require('../../_chunks/dep-5bdeff12.js');
require('../../image/props.js');
require('../../space/index.js');
require('../../space/space.js');
require('../../space/props.js');
require('../../_chunks/dep-98baf2b8.js');
require('../../link/link.js');
require('../../link/props.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !Vue.isVNode(s);
}
var MultipleFlowList = Vue.defineComponent({
  name: "UploadMultipleFlowList",
  props: _objectSpread(_objectSpread({}, upload_consts_index.commonProps), {}, {
    showThumbnail: Boolean,
    uploadFiles: Function,
    cancelUpload: Function,
    dragEvents: Object,
    disabled: Boolean,
    isBatchUpload: Boolean,
    draggable: Boolean,
    showImageFileName: Boolean,
    uploadButton: Object,
    cancelUploadButton: Object,
    onPreview: Function
  }),
  setup: function setup(props, _ref) {
    var slots = _ref.slots;
    var _toRefs = Vue.toRefs(props),
      uploading = _toRefs.uploading,
      disabled = _toRefs.disabled,
      displayFiles = _toRefs.displayFiles,
      classPrefix = _toRefs.classPrefix,
      accept = _toRefs.accept;
    var uploadPrefix = Vue.computed(function () {
      return "".concat(classPrefix.value, "-upload");
    });
    var locale = Vue.computed(function () {
      return props.locale;
    });
    var renderTNodeJSX = index.useTNodeJSX();
    var _useGlobalIcon = index$1.useGlobalIcon({
        BrowseIcon: tdesignIconsVueNext.BrowseIcon,
        DeleteIcon: tdesignIconsVueNext.DeleteIcon,
        CheckCircleFilledIcon: tdesignIconsVueNext.CheckCircleFilledIcon,
        ErrorCircleFilledIcon: tdesignIconsVueNext.ErrorCircleFilledIcon,
        TimeFilledIcon: tdesignIconsVueNext.TimeFilledIcon,
        FileExcelIcon: tdesignIconsVueNext.FileExcelIcon,
        FilePdfIcon: tdesignIconsVueNext.FilePdfIcon,
        FileWordIcon: tdesignIconsVueNext.FileWordIcon,
        FilePowerpointIcon: tdesignIconsVueNext.FilePowerpointIcon,
        FileIcon: tdesignIconsVueNext.FileIcon,
        VideoIcon: tdesignIconsVueNext.VideoIcon
      }),
      BrowseIcon = _useGlobalIcon.BrowseIcon,
      DeleteIcon = _useGlobalIcon.DeleteIcon,
      CheckCircleFilledIcon = _useGlobalIcon.CheckCircleFilledIcon,
      ErrorCircleFilledIcon = _useGlobalIcon.ErrorCircleFilledIcon,
      TimeFilledIcon = _useGlobalIcon.TimeFilledIcon,
      FileExcelIcon = _useGlobalIcon.FileExcelIcon,
      FilePdfIcon = _useGlobalIcon.FilePdfIcon,
      FileWordIcon = _useGlobalIcon.FileWordIcon,
      FilePowerpointIcon = _useGlobalIcon.FilePowerpointIcon,
      FileIcon = _useGlobalIcon.FileIcon,
      VideoIcon = _useGlobalIcon.VideoIcon;
    var drag = upload_hooks_useDrag["default"](props.dragEvents, accept);
    var currentPreviewFile = Vue.ref([]);
    var previewIndex = Vue.ref(0);
    var uploadText = Vue.computed(function () {
      if (uploading.value) return "".concat(locale.value.progress.uploadingText);
      return locale.value.triggerUploadText.normal;
    });
    var innerDragEvents = Vue.computed(function () {
      var draggable = props.draggable === void 0 ? true : props.draggable;
      return draggable ? {
        onDrop: drag.handleDrop,
        onDragenter: drag.handleDragenter,
        onDragover: drag.handleDragover,
        onDragleave: drag.handleDragleave
      } : {};
    });
    var getStatusMap = function getStatusMap() {
      var iconMap = {
        success: Vue.createVNode(CheckCircleFilledIcon, null, null),
        fail: Vue.createVNode(ErrorCircleFilledIcon, null, null),
        progress: Vue.createVNode(loading_index.Loading, null, null),
        waiting: Vue.createVNode(TimeFilledIcon, null, null)
      };
      var progress = locale.value.progress;
      var textMap = {
        success: progress === null || progress === void 0 ? void 0 : progress.successText,
        fail: progress === null || progress === void 0 ? void 0 : progress.failText,
        progress: progress === null || progress === void 0 ? void 0 : progress.uploadingText,
        waiting: progress === null || progress === void 0 ? void 0 : progress.waitingText
      };
      return {
        iconMap: iconMap,
        textMap: textMap
      };
    };
    var renderEmpty = function renderEmpty() {
      return Vue.createVNode("div", {
        "class": "".concat(uploadPrefix.value, "__flow-empty")
      }, [drag.dragActive.value ? locale.value.dragger.dragDropText : locale.value.dragger.clickAndDragText]);
    };
    var renderImgItem = function renderImgItem(file, index) {
      var _file$response;
      var _getStatusMap = getStatusMap(),
        iconMap = _getStatusMap.iconMap,
        textMap = _getStatusMap.textMap;
      var fileName = props.abridgeName && file.name ? utils.abridgeName.apply(void 0, [file.name].concat(_toConsumableArray__default["default"](props.abridgeName))) : file.name;
      return Vue.createVNode("li", {
        "class": "".concat(uploadPrefix.value, "__card-item"),
        "key": file.name + index + file.percent + file.status || "0"
      }, [Vue.createVNode("div", {
        "class": ["".concat(uploadPrefix.value, "__card-content"), _defineProperty__default["default"]({}, "".concat(classPrefix.value, "-is-bordered"), file.status !== "waiting")]
      }, [file.status === "progress" && Vue.createVNode("div", {
        "class": "".concat(uploadPrefix.value, "__card-status-wrap ").concat(uploadPrefix.value, "__").concat(props.theme, "-progress")
      }, [iconMap[file.status], Vue.createVNode("p", null, [textMap[file.status], props.showUploadProgress && " ".concat(file.percent, "%")])]), file.status === "fail" && Vue.createVNode("div", {
        "class": "".concat(uploadPrefix.value, "__card-status-wrap ").concat(uploadPrefix.value, "__").concat(props.theme, "-fail")
      }, [iconMap[file.status], Vue.createVNode("p", null, [((_file$response = file.response) === null || _file$response === void 0 ? void 0 : _file$response.error) || textMap[file.status]])]), (["waiting", "success"].includes(file.status) || !file.status && file.url) && Vue.createVNode(image_index.Image, {
        "class": "".concat(uploadPrefix.value, "__card-image"),
        "src": file.url || file.raw,
        "error": "",
        "loading": "",
        "fit": "contain"
      }, null), Vue.createVNode("div", {
        "class": "".concat(uploadPrefix.value, "__card-mask")
      }, [(file.url || file.raw) && !["progress", "fail"].includes(file.status) && Vue.createVNode("span", {
        "class": "".concat(uploadPrefix.value, "__card-mask-item")
      }, [Vue.createVNode(BrowseIcon, {
        "onClick": function onClick(_ref3) {
          var _props$onPreview;
          var e = _ref3.e;
          previewIndex.value = index;
          currentPreviewFile.value = displayFiles.value;
          (_props$onPreview = props.onPreview) === null || _props$onPreview === void 0 || _props$onPreview.call(props, {
            file: file,
            index: index,
            e: e
          });
        }
      }, null), Vue.createVNode("span", {
        "class": "".concat(uploadPrefix.value, "__card-mask-item-divider")
      }, null)]), !disabled.value && Vue.createVNode("span", {
        "class": "".concat(uploadPrefix.value, "__card-mask-item ").concat(uploadPrefix.value, "__delete"),
        "onClick": function onClick(e) {
          return props.onRemove({
            e: e,
            index: index,
            file: file
          });
        }
      }, [Vue.createVNode(DeleteIcon, null, null)])])]), props.showImageFileName && Vue.createVNode("p", {
        "class": ["".concat(uploadPrefix.value, "__card-name"), "".concat(uploadPrefix.value, "__flow-status")]
      }, [["success", "waiting"].includes(file.status) && iconMap[file.status], fileName])]);
    };
    var renderStatus = function renderStatus(file) {
      var _file$response2, _file$response3;
      var _getStatusMap2 = getStatusMap(),
        iconMap = _getStatusMap2.iconMap,
        textMap = _getStatusMap2.textMap;
      return Vue.createVNode("div", {
        "class": "".concat(uploadPrefix.value, "__flow-status")
      }, [iconMap[file.status], Vue.createVNode("span", {
        "class": "".concat(uploadPrefix.value, "__").concat(props.theme, "-").concat(file.status)
      }, [(_file$response2 = file.response) !== null && _file$response2 !== void 0 && _file$response2.error ? ((_file$response3 = file.response) === null || _file$response3 === void 0 ? void 0 : _file$response3.error) || textMap[file.status] : textMap[file.status], props.showUploadProgress && file.status === "progress" ? " ".concat(file.percent || 0, "%") : ""])]);
    };
    var renderNormalActionCol = function renderNormalActionCol(file, index) {
      var _locale$value;
      return Vue.createVNode("td", null, [Vue.createVNode(button_index.Button, {
        "theme": "primary",
        "variant": "text",
        "content": (_locale$value = locale.value) === null || _locale$value === void 0 || (_locale$value = _locale$value.triggerUploadText) === null || _locale$value === void 0 ? void 0 : _locale$value["delete"],
        "class": "".concat(uploadPrefix.value, "__delete"),
        "onClick": function onClick(e) {
          return props.onRemove({
            e: e,
            index: index,
            file: file
          });
        }
      }, null)]);
    };
    var renderBatchActionCol = function renderBatchActionCol(index) {
      var _locale$value2;
      return index === 0 ? Vue.createVNode("td", {
        "rowspan": displayFiles.value.length,
        "class": "".concat(uploadPrefix.value, "__flow-table__batch-row")
      }, [Vue.createVNode(button_index.Button, {
        "theme": "primary",
        "variant": "text",
        "content": (_locale$value2 = locale.value) === null || _locale$value2 === void 0 || (_locale$value2 = _locale$value2.triggerUploadText) === null || _locale$value2 === void 0 ? void 0 : _locale$value2["delete"],
        "class": "".concat(uploadPrefix.value, "__delete"),
        "onClick": function onClick(e) {
          return props.onRemove({
            e: e,
            index: -1,
            file: void 0
          });
        }
      }, null)]) : null;
    };
    var getFileThumbnailIcon = function getFileThumbnailIcon(fileType) {
      if (utils.FILE_PDF_REGEXP.test(fileType)) {
        return Vue.createVNode(FilePdfIcon, null, null);
      }
      if (utils.FILE_EXCEL_REGEXP.test(fileType)) {
        return Vue.createVNode(FileExcelIcon, null, null);
      }
      if (utils.FILE_WORD_REGEXP.test(fileType)) {
        return Vue.createVNode(FileWordIcon, null, null);
      }
      if (utils.FILE_PPT_REGEXP.test(fileType)) {
        return Vue.createVNode(FilePowerpointIcon, null, null);
      }
      if (utils.VIDEO_REGEXP.test(fileType)) {
        return Vue.createVNode(VideoIcon, null, null);
      }
      return Vue.createVNode(FileIcon, null, null);
    };
    var renderFileThumbnail = function renderFileThumbnail(file) {
      if (!file || !file.raw && file.url) return null;
      var fileType = file.raw.type;
      var className = "".concat(uploadPrefix.value, "__file-thumbnail");
      if (utils.IMAGE_REGEXP.test(fileType)) {
        return Vue.createVNode(image_index.Image, {
          "class": className,
          "src": file.url || file.raw,
          "fit": "scale-down",
          "error": "",
          "loading": "",
          "onClick": function onClick(e) {
            var _props$onPreview2;
            e.preventDefault();
            currentPreviewFile.value = [file];
            previewIndex.value = 0;
            (_props$onPreview2 = props.onPreview) === null || _props$onPreview2 === void 0 || _props$onPreview2.call(props, {
              file: file,
              index: 0,
              e: e
            });
          }
        }, null);
      }
      return Vue.createVNode("div", {
        "class": className
      }, [getFileThumbnailIcon(fileType)]);
    };
    var renderFileList = function renderFileList() {
      var _locale$value$file, _locale$value$file2, _locale$value$file3, _locale$value$file4;
      var customList = renderTNodeJSX("fileListDisplay", {
        params: {
          cancelUpload: props.cancelUpload,
          uploadFiles: props.uploadFiles,
          onPreview: props.onPreview,
          onRemove: props.onRemove,
          toUploadFiles: props.toUploadFiles,
          sizeOverLimitMessage: props.sizeOverLimitMessage,
          locale: props.locale,
          files: props.displayFiles,
          dragEvents: innerDragEvents.value
        }
      });
      if (customList || props.fileListDisplay) return customList;
      return Vue.createVNode("table", Vue.mergeProps({
        "class": "".concat(uploadPrefix.value, "__flow-table")
      }, innerDragEvents.value), [Vue.createVNode("thead", null, [Vue.createVNode("tr", null, [Vue.createVNode("th", null, [(_locale$value$file = locale.value.file) === null || _locale$value$file === void 0 ? void 0 : _locale$value$file.fileNameText]), Vue.createVNode("th", {
        "style": {
          minWidth: "120px"
        }
      }, [(_locale$value$file2 = locale.value.file) === null || _locale$value$file2 === void 0 ? void 0 : _locale$value$file2.fileSizeText]), Vue.createVNode("th", {
        "style": {
          minWidth: "120px"
        }
      }, [(_locale$value$file3 = locale.value.file) === null || _locale$value$file3 === void 0 ? void 0 : _locale$value$file3.fileStatusText]), disabled.value ? null : Vue.createVNode("th", null, [(_locale$value$file4 = locale.value.file) === null || _locale$value$file4 === void 0 ? void 0 : _locale$value$file4.fileOperationText])])]), Vue.createVNode("tbody", null, [!displayFiles.value.length && Vue.createVNode("tr", null, [Vue.createVNode("td", {
        "colspan": 4
      }, [renderEmpty()])]), displayFiles.value.map(function (file, index) {
        var _props$abridgeName;
        var showBatchUploadAction = props.isBatchUpload;
        var deleteNode = showBatchUploadAction && displayFiles.value.every(function (item) {
          return item.status === "success" || !item.status;
        }) ? renderBatchActionCol(index) : renderNormalActionCol(file, index);
        var fileName = (_props$abridgeName = props.abridgeName) !== null && _props$abridgeName !== void 0 && _props$abridgeName.length ? utils.abridgeName.apply(void 0, [file.name].concat(_toConsumableArray__default["default"](props.abridgeName))) : file.name;
        var thumbnailNode = props.showThumbnail ? Vue.createVNode("div", {
          "class": "".concat(uploadPrefix.value, "__file-info")
        }, [renderFileThumbnail(file), fileName]) : fileName;
        var fileNameNode = file.url ? Vue.createVNode(link_index.Link, {
          "href": file.url,
          "target": "_blank",
          "hover": "color",
          "disabled": false
        }, _isSlot(thumbnailNode) ? thumbnailNode : {
          "default": function _default() {
            return [thumbnailNode];
          }
        }) : thumbnailNode;
        return Vue.createVNode("tr", {
          "key": file.name + index + file.size
        }, [Vue.createVNode("td", {
          "class": "".concat(uploadPrefix.value, "__file-name"),
          "key": file.name + file.url
        }, [fileNameNode]), Vue.createVNode("td", null, [utils.returnFileSize(file.size)]), Vue.createVNode("td", null, [renderStatus(file)]), disabled.value ? null : deleteNode]);
      })])]);
    };
    var renderImageList = function renderImageList() {
      var customList = renderTNodeJSX("fileListDisplay", {
        params: {
          cancelUpload: props.cancelUpload,
          uploadFiles: props.uploadFiles,
          onRemove: props.onRemove,
          onPreview: props.onPreview,
          toUploadFiles: props.toUploadFiles,
          sizeOverLimitMessage: props.sizeOverLimitMessage,
          locale: props.locale,
          files: props.displayFiles,
          dragEvents: innerDragEvents.value
        }
      });
      if (customList || props.fileListDisplay) return customList;
      return Vue.createVNode("ul", {
        "class": "".concat(uploadPrefix.value, "__card clearfix")
      }, [props.displayFiles.map(function (file, index) {
        return renderImgItem(file, index);
      })]);
    };
    return function () {
      var _slots$default, _locale$value3, _locale$value4;
      var cardClassName = "".concat(uploadPrefix.value, "__flow-card-area");
      var cancelUploadDisabled = disabled.value || !uploading.value;
      var hasCancelUploadTNode = slots.uploadButton || isFunction.isFunction(props.uploadButton);
      var uploadButtonDisabled = Boolean(disabled.value || uploading.value || !displayFiles.value.length);
      var hasUploadButtonTNode = slots.cancelUploadButton || isFunction.isFunction(props.cancelUploadButton);
      return Vue.createVNode("div", {
        "class": "".concat(uploadPrefix.value, "__flow ").concat(uploadPrefix.value, "__flow-").concat(props.theme)
      }, [Vue.createVNode("div", {
        "class": "".concat(uploadPrefix.value, "__flow-op")
      }, [(_slots$default = slots["default"]) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots), props.placeholder && Vue.createVNode("small", {
        "class": "".concat(uploadPrefix.value, "__flow-placeholder ").concat(uploadPrefix.value, "__placeholder")
      }, [props.placeholder])]), props.theme === "image-flow" && Vue.createVNode("div", Vue.mergeProps({
        "class": cardClassName
      }, innerDragEvents.value), [displayFiles.value.length ? renderImageList() : renderEmpty()]), props.theme === "file-flow" && (displayFiles.value.length ? renderFileList() : Vue.createVNode("div", Vue.mergeProps({
        "class": cardClassName
      }, innerDragEvents.value), [renderEmpty()])), !props.autoUpload && (props.uploadButton !== null || props.cancelUploadButton !== null) && Vue.createVNode("div", {
        "class": "".concat(uploadPrefix.value, "__flow-bottom")
      }, [props.cancelUploadButton !== null && (hasCancelUploadTNode ? renderTNodeJSX("cancelUploadButton", {
        params: {
          disabled: cancelUploadDisabled,
          cancelUploadText: (_locale$value3 = locale.value) === null || _locale$value3 === void 0 ? void 0 : _locale$value3.cancelUploadText,
          cancelUpload: props.cancelUpload
        }
      }) : Vue.createVNode(button_index.Button, Vue.mergeProps({
        "theme": "default",
        "disabled": cancelUploadDisabled,
        "content": (_locale$value4 = locale.value) === null || _locale$value4 === void 0 ? void 0 : _locale$value4.cancelUploadText,
        "class": "".concat(uploadPrefix.value, "__cancel"),
        "onClick": function onClick(e) {
          var _props$cancelUpload;
          return (_props$cancelUpload = props.cancelUpload) === null || _props$cancelUpload === void 0 ? void 0 : _props$cancelUpload.call(props, {
            e: e
          });
        }
      }, isObject.isObject(props.cancelUploadButton) ? props.cancelUploadButton : {}), null)), props.uploadButton !== null && (hasUploadButtonTNode ? renderTNodeJSX("uploadButton", {
        params: {
          disabled: uploadButtonDisabled,
          uploading: uploading.value,
          uploadText: uploadText.value,
          uploadFiles: props.uploadFiles
        }
      }) : Vue.createVNode(button_index.Button, Vue.mergeProps({
        "disabled": uploadButtonDisabled,
        "theme": "primary",
        "loading": uploading.value,
        "class": "".concat(uploadPrefix.value, "__continue"),
        "content": uploadText.value,
        "onClick": function onClick() {
          var _props$uploadFiles;
          return (_props$uploadFiles = props.uploadFiles) === null || _props$uploadFiles === void 0 ? void 0 : _props$uploadFiles.call(props);
        }
      }, isObject.isObject(props.uploadButton) ? props.uploadButton : {}), null))]), Vue.createVNode(imageViewer_index.ImageViewer, Vue.mergeProps({
        "images": currentPreviewFile.value.map(function (t) {
          return t.url || t.raw;
        }),
        "visible": !!currentPreviewFile.value.length,
        "onClose": function onClose() {
          currentPreviewFile.value = [];
        },
        "index": previewIndex.value,
        "onIndexChange": function onIndexChange(val) {
          return previewIndex.value = val;
        }
      }, props.imageViewerProps), null)]);
    };
  }
});

exports["default"] = MultipleFlowList;
//# sourceMappingURL=multiple-flow-list.js.map
