/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { DragPosition } from './useDraggable.js';
import { emitEvent } from '../utils/index.js';
import 'lodash-es';
import 'vue';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/typeof';
import '../../_chunks/dep-2ebbfb02.js';
import '../../_chunks/dep-9dbbf468.js';
import '../../config-provider/hooks/useConfig.js';
import '../../config-provider/utils/context.js';
import '../../_chunks/dep-12656268.js';
import 'dayjs';
import '@babel/runtime/helpers/slicedToArray';
import '../../_chunks/dep-d7438c38.js';
import '@babel/runtime/helpers/createClass';
import '@babel/runtime/helpers/classCallCheck';
import '@babel/runtime/helpers/defineProperty';
import 'tdesign-icons-vue-next';
import '../../checkbox/index.js';
import '../../checkbox/checkbox.js';
import '../../checkbox/props.js';
import '../../_chunks/dep-63405667.js';
import '../../_chunks/dep-b3383d08.js';
import '../../_chunks/dep-63d8d6a4.js';
import '../../_chunks/dep-3f5a3be0.js';
import '../../_chunks/dep-ea83a66c.js';
import '../../_chunks/dep-5b12c3c1.js';
import '../../_chunks/dep-44837826.js';
import '../../_chunks/dep-3fd220fd.js';
import '../../_chunks/dep-e26faff6.js';
import '../../_chunks/dep-f75f0445.js';
import '../../checkbox/consts/index.js';
import '../../checkbox/hooks/useCheckboxLazyLoad.js';
import '../../_chunks/dep-85ef14f4.js';
import '../../checkbox/hooks/useKeyboardEvent.js';
import '../../_chunks/dep-863ca30b.js';
import '../../checkbox/group.js';
import '../../checkbox/checkbox-group-props.js';
import '../../_chunks/dep-1fb9eacc.js';
import '../../_chunks/dep-19faee87.js';
import '../../loading/index.js';
import '../../loading/directive.js';
import '../../loading/plugin.js';
import '../../_chunks/dep-b2639fe9.js';
import '../../loading/icon/gradient.js';
import '../../_chunks/dep-132b4411.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '../../loading/props.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';

function useDragHandle(state) {
  var props = state.props,
    context = state.context,
    scope = state.scope,
    store = state.store;
  var dragNode = null;
  var handleDragStart = function handleDragStart(state2) {
    var dragEvent = state2.dragEvent,
      node = state2.node;
    dragNode = node;
    var ctx = {
      node: node.getModel(),
      e: dragEvent
    };
    emitEvent(props, context, "drag-start", ctx);
  };
  var handleDragEnd = function handleDragEnd(state2) {
    var dragEvent = state2.dragEvent,
      node = state2.node;
    dragNode = node;
    var ctx = {
      node: node.getModel(),
      e: dragEvent
    };
    emitEvent(props, context, "drag-end", ctx);
  };
  var handleDragOver = function handleDragOver(state2) {
    var dragEvent = state2.dragEvent,
      node = state2.node;
    var ctx = {
      node: node.getModel(),
      e: dragEvent
    };
    emitEvent(props, context, "drag-over", ctx);
  };
  var handleDragLeave = function handleDragLeave(state2) {
    var dragEvent = state2.dragEvent,
      node = state2.node;
    var ctx = {
      node: node.getModel(),
      e: dragEvent
    };
    emitEvent(props, context, "drag-leave", ctx);
  };
  var handleDrop = function handleDrop(state2) {
    var _props$allowDrop;
    var dragEvent = state2.dragEvent,
      node = state2.node,
      dropPosition = state2.dropPosition;
    if (node.value === dragNode.value || node.getParents().some(function (_node) {
      return _node.value === dragNode.value;
    })) return;
    var ctx = {
      dropNode: node.getModel(),
      dragNode: dragNode.getModel(),
      dropPosition: dropPosition,
      e: dragEvent
    };
    if (((_props$allowDrop = props.allowDrop) === null || _props$allowDrop === void 0 ? void 0 : _props$allowDrop.call(props, ctx)) === false) return;
    var nodes = store.getNodes();
    nodes.some(function (_node) {
      if (_node.value === node.value) {
        if (dropPosition === DragPosition.Inside) {
          dragNode.appendTo(store, _node);
        } else if (dropPosition === DragPosition.Before) {
          node.insertBefore(dragNode);
        } else {
          node.insertAfter(dragNode);
        }
        return true;
      }
      return false;
    });
    emitEvent(props, context, "drop", ctx);
  };
  var drag = {
    handleDragStart: handleDragStart,
    handleDragEnd: handleDragEnd,
    handleDragOver: handleDragOver,
    handleDragLeave: handleDragLeave,
    handleDrop: handleDrop
  };
  scope.drag = drag;
  return {
    drag: drag
  };
}

export { useDragHandle as default };
//# sourceMappingURL=useDragHandle.js.map
