/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { createVNode } from 'vue';
import '../utils/adapt.mjs';
import { getTNode } from '../utils/index.mjs';
import { u as usePrefixClass, i as useGlobalIcon } from '../../_chunks/dep-c69e7150.mjs';
import { CaretRightSmallIcon } from 'tdesign-icons-vue-next';
import { Loading } from '../../loading/index.mjs';
import '../../_chunks/dep-c72357bc.mjs';
import '../../_chunks/dep-f1fa63a0.mjs';
import 'lodash-es';
import '../../checkbox/index.mjs';
import '../../checkbox/checkbox.mjs';
import '../../_chunks/dep-d5984b98.mjs';
import '../../_chunks/dep-e6afea32.mjs';
import '../../_chunks/dep-76d93af3.mjs';
import '../../_chunks/dep-e1d26131.mjs';
import '../../checkbox/props.mjs';
import '../../checkbox/consts/index.mjs';
import '../../checkbox/hooks/useCheckboxLazyLoad.mjs';
import '../../_chunks/dep-b0da903a.mjs';
import '../../checkbox/hooks/useKeyboardEvent.mjs';
import '../../_chunks/dep-7503a8dd.mjs';
import '../../_chunks/dep-0bbaca7e.mjs';
import '../../config-provider/hooks/useConfig.mjs';
import '../../config-provider/utils/context.mjs';
import '../../_chunks/dep-42631175.mjs';
import '../../_chunks/dep-6c1c0c68.mjs';
import '../../_chunks/dep-d605ac5f.mjs';
import '../../_chunks/dep-e4e86b5b.mjs';
import '../../_chunks/dep-baf47de3.mjs';
import '../../_chunks/dep-5d812685.mjs';
import '../../checkbox/group.mjs';
import '../../checkbox/checkbox-group-props.mjs';
import './style/css.mjs';
import '../../_chunks/dep-7e50ae7c.mjs';
import '../../_chunks/dep-1294ef59.mjs';
import '../../_chunks/dep-4923efbb.mjs';
import '../../loading/directive.mjs';
import '../../loading/plugin.mjs';
import '../../loading/loading.mjs';
import '../../loading/icon/gradient.mjs';
import '../../_chunks/dep-855aa4da.mjs';
import '../../_chunks/dep-a2cd0a21.mjs';
import '../../loading/props.mjs';

function useRenderIcon(state) {
  var classPrefix = usePrefixClass().value;
  var componentName = usePrefixClass("tree").value;
  var getFolderIcon = function getFolderIcon(h) {
    var _useGlobalIcon = useGlobalIcon({
        CaretRightSmallIcon: CaretRightSmallIcon
      }),
      CaretRightSmallIcon$1 = _useGlobalIcon.CaretRightSmallIcon;
    return createVNode(CaretRightSmallIcon$1, null, null);
  };
  var handleMousedown = function handleMousedown(evt) {
    evt.preventDefault();
  };
  var renderIcon = function renderIcon(h) {
    var node = state.node,
      treeScope = state.treeScope;
    var scopedSlots = treeScope.scopedSlots;
    var treeProps = (treeScope === null || treeScope === void 0 ? void 0 : treeScope.treeProps) || {};
    var icon = treeProps.icon;
    var isDefaultIcon = false;
    var iconNode = null;
    if (icon === true) {
      if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.icon) {
        iconNode = scopedSlots.icon({
          node: node === null || node === void 0 ? void 0 : node.getModel()
        });
      } else if (!node.vmIsLeaf) {
        isDefaultIcon = true;
        iconNode = getFolderIcon(h);
        if (node.loading && node.expanded) {
          iconNode = createVNode(Loading, null, null);
        }
      } else {
        iconNode = "";
      }
    } else if (icon) {
      iconNode = getTNode(icon, {
        createElement: h,
        node: node
      });
    }
    var wrapIconNode = createVNode("span", {
      "class": ["".concat(componentName, "__icon"), "".concat(classPrefix, "-folder-icon"), isDefaultIcon ? "".concat(componentName, "__icon--default") : ""],
      "trigger": "expand",
      "ignore": "active",
      "onmousedown": handleMousedown
    }, [iconNode]);
    return wrapIconNode;
  };
  return {
    renderIcon: renderIcon
  };
}

export { useRenderIcon as default };
//# sourceMappingURL=useRenderIcon.mjs.map
