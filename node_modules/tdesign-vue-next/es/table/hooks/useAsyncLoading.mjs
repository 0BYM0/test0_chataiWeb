/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { computed, createVNode } from 'vue';
import { _ as _defineProperty } from '../../_chunks/dep-76d93af3.mjs';
import { isString } from 'lodash-es';
import { a as useTNodeJSX } from '../../_chunks/dep-c69e7150.mjs';
import { Loading } from '../../loading/index.mjs';
import useClassName from './useClassName.mjs';
import { useConfig } from '../../config-provider/hooks/useConfig.mjs';
import '../../_chunks/dep-e1d26131.mjs';
import '../../_chunks/dep-0bbaca7e.mjs';
import '../../_chunks/dep-e6afea32.mjs';
import '../../_chunks/dep-c72357bc.mjs';
import '../../_chunks/dep-f1fa63a0.mjs';
import '../../_chunks/dep-b0da903a.mjs';
import '../../_chunks/dep-d5984b98.mjs';
import '../../_chunks/dep-e4e86b5b.mjs';
import '../../_chunks/dep-baf47de3.mjs';
import '../../config-provider/utils/context.mjs';
import '../../_chunks/dep-42631175.mjs';
import '../../_chunks/dep-6c1c0c68.mjs';
import '../../_chunks/dep-d605ac5f.mjs';
import '../../_chunks/dep-5d812685.mjs';
import '../../_chunks/dep-7503a8dd.mjs';
import '../../loading/directive.mjs';
import '../../loading/plugin.mjs';
import '../../loading/loading.mjs';
import '../../loading/icon/gradient.mjs';
import '../../_chunks/dep-855aa4da.mjs';
import '../../_chunks/dep-a2cd0a21.mjs';
import '../../loading/props.mjs';
import './style/css.mjs';

function useAsyncLoading(props) {
  var renderTNode = useTNodeJSX();
  var _useConfig = useConfig("table", props.locale),
    globalConfig = _useConfig.globalConfig;
  var _useClassName = useClassName(),
    isLoadingClass = _useClassName.isLoadingClass,
    isLoadMoreClass = _useClassName.isLoadMoreClass,
    asyncLoadingClass = _useClassName.asyncLoadingClass;
  var classes = computed(function () {
    return [asyncLoadingClass, _defineProperty(_defineProperty({}, isLoadingClass, props.asyncLoading === "loading"), isLoadMoreClass, props.asyncLoading === "load-more")];
  });
  function onLoadClick() {
    var _props$onAsyncLoading;
    if (!isString(props.asyncLoading)) return;
    (_props$onAsyncLoading = props.onAsyncLoadingClick) === null || _props$onAsyncLoading === void 0 || _props$onAsyncLoading.call(props, {
      status: props.asyncLoading
    });
  }
  function renderAsyncLoading() {
    var asyncLoadingNode = renderTNode("asyncLoading");
    if (isString(asyncLoadingNode)) {
      var asyncLoading = props.asyncLoading;
      var loadingText = {
        "load-more": globalConfig.value.loadingMoreText,
        loading: globalConfig.value.loadingText
      }[String(asyncLoading)];
      return createVNode("div", {
        "class": classes.value,
        "onClick": onLoadClick
      }, [createVNode(Loading, {
        "indicator": asyncLoading === "loading",
        "loading": !!asyncLoading,
        "size": "small",
        "text": loadingText
      }, null)]);
    }
    if (![null, false, void 0].includes(asyncLoadingNode)) {
      return createVNode("div", {
        "class": classes.value,
        "onClick": onLoadClick
      }, [asyncLoadingNode]);
    }
    return null;
  }
  return {
    renderAsyncLoading: renderAsyncLoading
  };
}

export { useAsyncLoading as default };
//# sourceMappingURL=useAsyncLoading.mjs.map
