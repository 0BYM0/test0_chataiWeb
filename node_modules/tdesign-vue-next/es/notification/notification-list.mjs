/**
 * tdesign v1.15.1
 * (c) 2025 tdesign
 * @license MIT
 */

import { defineComponent, ref, computed, createVNode, mergeProps } from 'vue';
import { _ as _defineProperty } from '../_chunks/dep-76d93af3.mjs';
import _Notification from './notification.mjs';
import { DEFAULT_Z_INDEX, PLACEMENT_OFFSET, DISTANCE } from './consts/index.mjs';
import { u as usePrefixClass } from '../_chunks/dep-c69e7150.mjs';
import '../_chunks/dep-e1d26131.mjs';
import 'tdesign-icons-vue-next';
import 'lodash-es';
import './props.mjs';
import './utils/index.mjs';
import './utils/animate.mjs';
import '../config-provider/hooks/useConfig.mjs';
import '../config-provider/utils/context.mjs';
import '../_chunks/dep-42631175.mjs';
import '../_chunks/dep-f1fa63a0.mjs';
import '../_chunks/dep-6c1c0c68.mjs';
import '../_chunks/dep-d605ac5f.mjs';
import '../_chunks/dep-d5984b98.mjs';
import '../_chunks/dep-e6afea32.mjs';
import '../_chunks/dep-0bbaca7e.mjs';
import '../_chunks/dep-c72357bc.mjs';
import '../_chunks/dep-b0da903a.mjs';
import '../_chunks/dep-e4e86b5b.mjs';
import '../_chunks/dep-baf47de3.mjs';
import '../_chunks/dep-5d812685.mjs';
import '../_chunks/dep-7503a8dd.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var NotificationList = defineComponent({
  props: {
    placement: {
      type: String,
      "default": "top-right",
      validator: function validator(v) {
        return ["top-left", "top-right", "bottom-left", "bottom-right"].indexOf(v) > -1;
      }
    }
  },
  setup: function setup(props, _ref) {
    var expose = _ref.expose;
    var COMPONENT_NAME = usePrefixClass("notification-list");
    var placement = props.placement;
    var list = ref([]);
    var notificationList = ref([]);
    var styles = computed(function () {
      return _objectSpread({
        zIndex: DEFAULT_Z_INDEX
      }, PLACEMENT_OFFSET[placement]);
    });
    var add = function add(options) {
      list.value.push(options);
      return list.value.length - 1;
    };
    var remove = function remove(index) {
      list.value.splice(index, 1);
    };
    var removeAll = function removeAll() {
      list.value = [];
    };
    var getOffset = function getOffset(val) {
      if (!val) return;
      return isNaN(Number(val)) ? val : "".concat(val, "px");
    };
    var notificationStyles = function notificationStyles(item) {
      var styles2 = {
        marginBottom: DISTANCE
      };
      if (item.offset) {
        styles2.position = "relative";
        styles2.left = getOffset(item.offset[0]);
        styles2.top = getOffset(item.offset[1]);
      }
      if (item.zIndex) styles2["z-index"] = item.zIndex;
      return styles2;
    };
    var getProps = function getProps(index, item) {
      return _objectSpread(_objectSpread({}, item), {}, {
        onCloseBtnClick: function onCloseBtnClick(e) {
          if (item.onCloseBtnClick) {
            item.onCloseBtnClick(e);
          }
          return remove(index);
        },
        onDurationEnd: function onDurationEnd() {
          if (item.onDurationEnd) {
            item.onDurationEnd();
          }
          return remove(index);
        }
      });
    };
    var addChild = function addChild(el) {
      if (el) {
        notificationList.value.push(el);
      }
    };
    expose({
      add: add,
      remove: remove,
      removeAll: removeAll,
      list: list,
      notificationList: notificationList
    });
    return function () {
      if (!list.value.length) return;
      return createVNode("div", {
        "class": "".concat(COMPONENT_NAME.value, "__show"),
        "style": styles.value
      }, [list.value.map(function (item, index) {
        return createVNode(_Notification, mergeProps({
          "ref": addChild,
          "key": item.id,
          "style": notificationStyles(item)
        }, getProps(index, item)), null);
      })]);
    };
  }
});

export { NotificationList as default };
//# sourceMappingURL=notification-list.mjs.map
